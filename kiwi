#!/usr/bin/env python3

import argparse
import errno
import traceback
import sys
import os
import importlib
import subprocess
import ast
import shlex
from enum import Enum
from json import loads, dumps
from os.path import isfile, join, expanduser, getsize
from hashlib import sha256
from shutil import rmtree
from datetime import datetime
from tempfile import mkdtemp
from io import StringIO

# package resolution method =============
def resolve(package):

	try:
		importlib.import_module(package)
	except ImportError:
		subprocess.call([sys.executable, "-m", "pip", "install", "--user", "--no-cache-dir", package])

# resolve not built-in python packages
for dep in ['requests', 'jsonpickle']:
	resolve(dep)

# import resolved packages
import requests
import jsonpickle

# =======================================

# unconfigurable globals
home_dir = join(expanduser("~"), '.kiwi')

# global kiwi instance
KIWI = None

class Kiwi:

	class _Runtime:

		class Modules(Enum):
			Client = "client.py"
			Server = "server.py"
			Module = "module.py"

		def __init__(self, assets):
			self.assets = assets

		def run(self, module, *args):

			current_asset = self.assets.runtime(module)

			if not isfile(current_asset.local):
				if not self.update("runtime must be updated"):
					sys.exit(0)

				# install missing module
				self.assets.install(current_asset)

			return Kiwi.import_module('kiwi_' + module.value, current_asset.local).run(*args)

		def update(self, message):
		
			runtime_assets = [self.assets.runtime(asset) for asset in self.Modules if isfile(self.assets.runtime(asset).local)]
			runtime_assets.append(self.assets.kiwi())

			try:

				# check for runtime updates
				assets_to_update = []
				for asset in runtime_assets:
					if isfile(asset.local) and not self.assets.up_to_date(asset):
						assets_to_update.append(asset)

				# update outdated runtime modules
				if assets_to_update:
					Kiwi.say(message + ". ", False)

					if Kiwi.Helper.ask("Proceed?", ['y', 'n']) == 'y':
						for asset in assets_to_update:
							self.assets.install(asset)

					else:
						return False

				return True

			except requests.exceptions.RequestException as e:
				Kiwi.Helper.report(e, 'could not get remote asset')
			except (IOError, OSError) as e:
				Kiwi.Helper.report(e)

			return False

	class _Assets:

		def __init__(self, config):
			self.config = config

		def module(self, name):
			return self._with_cache(argparse.Namespace(
				remote = join(self.config.remote_raw, self.config.remote_modules_dir, name, self.config.kiwi_side.value),
				local = join(self.config.local_modules_dir, name, self.config.kiwi_side.value)
			))

		def meta(self, name):
			return self._with_cache(argparse.Namespace(
				remote = join(self.config.remote_raw, self.config.remote_modules_dir, name, "meta.txt"),
				local = join(self.config.local_modules_dir, name, "meta.txt")
			))

		def runtime(self, module):
			return self._with_cache(argparse.Namespace(
				remote = join(self.config.remote_raw, self.config.remote_runtime_dir, module.value),
				local = join(self.config.local_runtime_dir, module.value)
			))

		def kiwi(self):
			return self._with_cache(argparse.Namespace(
				remote = join(self.config.remote_raw, "kiwi"),
				local = join(self.config.local_runtime_dir, os.path.abspath(__file__).split('/')[-1])
			))

		def _with_cache(self, asset):
			asset.cache = join(self.config.local_cache_dir, asset.local.replace("/", "_"))
			return asset

		def up_to_date(self, asset):
			remote_data = Kiwi.Helper.get(asset.remote, self.config.requests_timeout_seconds)

			# cache remote file
			with open(asset.cache, 'w') as cache:
				Kiwi.Helper.overwrite(cache, remote_data)

			# compare remote to local
			if isfile(asset.local):
				with open(asset.local, 'r') as local:
					return Kiwi.Helper.sha(remote_data) == Kiwi.Helper.sha(local.read())

			return False

		def install(self, asset):

			module_dir = '/'.join(asset.local.split('/')[:-1])

			try:

				# ensure asset directory
				Kiwi.Helper.ensure_directory(module_dir)

				with open(asset.local, 'w') as local:

					# overwrite from cache
					if isfile(asset.cache):
						with open(asset.cache, 'r') as cache:
							Kiwi.Helper.overwrite(local, cache.read())
						os.remove(asset.cache)

					# overwrite from remote
					else:
						Kiwi.Helper.overwrite(local, Kiwi.Helper.get(asset.remote, self.config.requests_timeout_seconds))

			finally:

				# remove empty module file
				if getsize(asset.local) == 0:
					os.remove(asset.local)

				# remove empty module directory
				if len(os.listdir(module_dir)) == 0:
					os.rmdir(module_dir)

	class Side(Enum):
		Client = "client.py"
		Server = "server.py"

	# configurable vars
	class _Config:
		_home_dir = home_dir

		remote_endpoint = "http://remote.imkiwi.me:8080"

		remote_modules_dir = "modules/"
		remote_runtime_dir = "runtime/"
		remote_api = "http://remote.imkiwi.me:8080/api/"
		remote_raw = "http://remote.imkiwi.me:8080/assets/"

		requests_timeout_seconds = 10

		local_modules_dir = join(_home_dir, "modules")
		local_runtime_dir = join(_home_dir, "runtime")
		local_modules_home_dir = join(_home_dir, "modules_home")
		local_cache_dir = None

		server_port = 8080

		def dump(self):
			return dumps({ item:getattr(self, item) for item in self.__items__ }, indent=4) + "\n"

		def __init__(self, config_path=None):
			self.__items__ = [item for item in self.__class__.__dict__ if not item.startswith("_") and not callable(self.__getattribute__(item))]

			if config_path:

				with open(config_path, 'r') as config_file:
					config_dict = loads(config_file.read())
					
					for item in self.__items__:
						if item in config_dict:
							setattr(self, item, config_dict[item])

	def __init__(self, config_path=None, server=False):

		default_config_path = join(home_dir, "kiwi.json")

		# if custom config file is specified - try using it
		if config_path:

			if not isfile(config_path):
				self.say(config_path + " does not exist")
				sys.exit(1)

			else:
				self.Config = Kiwi._Config(config_path)

		else:

			# if default config does not exist - load from default
			if not isfile(default_config_path):
				self.Config = Kiwi._Config()

			# use config in default location
			else:
				self.Config = Kiwi._Config(default_config_path)

		# set server bool
		self.Config.kiwi_side = self.Side.Server if server else self.Side.Client

		# init cache directory if needed
		if self.Config.local_cache_dir is None:
			self.Config.local_cache_dir = mkdtemp()
		else:
			self.Helper.ensure_directory(self.Config.local_cache_dir)

		# init runtime
		self.runtime = self._Runtime(self._Assets(self.Config))

		# init directories
		for directory in [
			self.Config.local_modules_dir,
			self.Config.local_runtime_dir
		]:
			self.Helper.ensure_directory(directory)

		# write kiwi symlink to runtime dir
		kiwi_origin_path = os.path.abspath(__file__)
		kiwi_symlink_path = join(self.Config.local_runtime_dir, kiwi_origin_path.split('/')[-1])

		if not isfile(kiwi_symlink_path):
			os.symlink(kiwi_origin_path, kiwi_symlink_path)

	def __del__(self):
		try:
			rmtree(self.Config.local_cache_dir)
		except:
			pass

	def get_installed_module_list(self):
		return [module for module in os.listdir(self.Config.local_modules_dir) if isfile(self.runtime.assets.module(module).local)]

	def get_remote_module_list(self):
		modules_dir = loads(self.Helper.get(join(self.Config.remote_api, self.Config.remote_modules_dir), self.Config.requests_timeout_seconds))
		remote = []

		# get list of module directories
		for module in modules_dir:
			module_dir = loads(self.Helper.get(join(self.Config.remote_api, self.Config.remote_modules_dir, module['name']), self.Config.requests_timeout_seconds))

			# find matching module file
			for _file in module_dir:
				if _file['name'] == self.Config.kiwi_side.value:
					remote.append(module['name'])
					break

		return remote

	def get_module_description(self, module):

		asset = self.runtime.assets.meta(module)

		try:

			# install meta file if not present
			if not isfile(asset.local):
				self.runtime.assets.install(asset)

			# read meta
			with open(asset.local, 'r') as local:
				return local.read()

		except Exception:
			return "[missing description]"

	def fetch_modules(self, modules, update=False, quiet=False):
		modules_fetched = []
		modules_update = []
		modules_failed = []

		# redirect stdout on quiet mode
		terminal = sys.stdout
		devnull = open(os.devnull, 'w')
		if quiet:
			sys.stdout = devnull

		for index, module in enumerate(modules):
			
			print("[" + str(index + 1) + "/" + str(len(modules)) + "]", end=' ')
			print("Fetching " + module + '...', end=' ')
			sys.stdout.flush()

			asset = self.runtime.assets.module(module)

			try:

				# updating module
				if update:

					# if file is up to date with remote
					if isfile(asset.local) and self.runtime.assets.up_to_date(asset):
						print('Up to date')

					# otherwise install latest
					else:
						self.runtime.assets.install(asset)

						print('Updated')
						modules_fetched.append(module)

				# getting module
				else:

					# if file is present on local
					if isfile(asset.local):

						# compare digests
						if self.runtime.assets.up_to_date(asset):
							print('Up to date')
						else:
							print('Update available')
							modules_update.append(module)

					# install missing module
					else:
						self.runtime.assets.install(asset)

						print('Done')
						modules_fetched.append(module)

			except requests.exceptions.RequestException as e:
				self.Helper.report(e, 'download failed')
				modules_failed.append(module)
			except (IOError, OSError) as e:
				self.Helper.report(e)
				modules_failed.append(module)

		sys.stdout = terminal
		devnull.close()
		return modules_fetched, modules_update, modules_failed

	@staticmethod
	def say(jibberish, newline=True):
		print('kiwi: ' + jibberish + ('\n' if newline else ''), end='')

	@staticmethod
	def import_module(module_name, module_path):

		# recursive body resolving method
		def _resolve_body(body):
						
			for body_object in body:
				if isinstance(body_object, ast.Import):
					for name in body_object.names:
						resolve(name.name)
				elif isinstance(body_object, ast.ImportFrom):
					resolve(body_object.module.split('.')[0])
				elif hasattr(body_object, 'body'):
					_resolve_body(body_object.body)

		# resolve python dependencies
		with open(module_path, 'r') as module_file:
			_resolve_body(ast.parse(module_file.read()).body)
		
		# get module spec
		module_spec = importlib.util.spec_from_loader(
			module_name,
			importlib.machinery.SourceFileLoader(module_name, module_path)
		)

		# load and exec
		module = importlib.util.module_from_spec(module_spec)
		module_spec.loader.exec_module(module)

		return module

	class Helper:

		def __init__(self, name):
			self.module_name = name
			self.module_home = join(KIWI.Config.local_modules_home_dir, name)
			self.module_desc = KIWI.get_module_description(name)
			self.module_remote = join(KIWI.Config.remote_endpoint, 'module', name)

			self.ensure_directory(self.module_home)

		def write_crashlog(self, exception_type, exception, exception_traceback):

			dest = join(self.module_home, "crash.log")

			# append to file if it already exists
			open_mode = 'a' if isfile(dest) else 'w'

			try:
				with open(dest, open_mode) as crash_log:
					crash_log.write(datetime.now().strftime("%d/%m/%Y %H:%M:%S") + '\n')
					crash_log.write(''.join(traceback.format_tb(exception_traceback)))
					crash_log.write('{}: {}'.format(exception_type.__name__, exception))
					crash_log.write('\n'*2)
					return True
			except Exception as e:
				self.report(e, 'could not write crash log')
				return False

		def request(self, request, timeout=10):

			# post request to remote kiwi as payload
			response = requests.post(self.module_remote, json=jsonpickle.encode(request), timeout=timeout)
			response.raise_for_status()
			return jsonpickle.decode(response.text)

		@staticmethod
		def module(module, arguments):

			# ensure module presence
			_, _, modules_failed = KIWI.fetch_modules([ module ], quiet=True)
			if modules_failed:
				KIWI.say('could not resolve the following dependency: {}'.format(modules_failed))
				sys.exit(1)

			# set new argv
			argv_backup = sys.argv
			sys.argv = [ module ] + shlex.split(arguments)

			# backup stdout
			stdout_backup = sys.stdout
			stdout = StringIO()
			sys.stdout = stdout

			# run module with arguments
			try:
				ret = KIWI.runtime.run(KIWI.runtime.Modules.Module, KIWI, sys.argv)
				return ret, stdout.getvalue()
			finally:
				sys.argv = argv_backup
				sys.stdout = stdout_backup

		@staticmethod
		def report(e, description=None, fatal=False):
			print('Error:', end=' ')
			print(e if not description else '{} ({})'.format(description, e))
	
			if fatal:
				sys.exit(1)

		@staticmethod
		def sha(data):
			return sha256(data.encode('utf-8')).hexdigest()

		@staticmethod
		def ask(query, options):
			while True:
				print('{} ({})'.format(query, '/'.join(options)), end=' ')
				response = input()
				if response in options:
					return response
		
		@staticmethod
		def get(url, timeout):
			response = requests.get(url, timeout=timeout)
			response.raise_for_status()
			return response.text

		@staticmethod
		def overwrite(file_, data):
			file_.seek(0)
			file_.truncate(0)
			file_.write(data)

		@staticmethod
		def ensure_directory(directory):
			# make sure given directory exists
			try:
				os.makedirs(directory)
			except OSError as e:
				if e.errno is not errno.EEXIST:
					Kiwi.Helper.report(e, 'could not create directory {}'.format(directory), True)

def main():

	"""
	I'm kiwi. I fetch, update and run kiwi modules.

	* To get a module, use 'kiwi -g [module]'
	* To run a module, use 'kiwi [module]'
	"""

	global KIWI

	# no arguments passed
	if len(sys.argv) == 1:

		print(main.__doc__)
		print('\tTry getting and running the \'helloworld\' module!\n')

	# module execution
	elif len(sys.argv) > 1 and sys.argv[1][:1] != '-':
		KIWI = Kiwi()
		sys.argv.pop(0)
		return KIWI.runtime.run(KIWI.runtime.Modules.Module, KIWI, sys.argv)

	# kiwi execution
	else:

		# parse args
		parser = argparse.ArgumentParser(description=main.__doc__,
										 formatter_class=argparse.RawDescriptionHelpFormatter)

		# kiwi server/client side boolean
		parser.add_argument('-s', '--server', action='store_true')

		# mutually exclusive args
		group = parser.add_mutually_exclusive_group()
		group.add_argument('-l', '--list-modules', action="store_true")
		group.add_argument('-g', '--get-modules', nargs='*')
		group.add_argument('-u', '--update-modules', nargs='*')
		group.add_argument('-U', '--self-update', action='store_true')
		group.add_argument('-S', '--start-server', action='store_true')
		group.add_argument('-c', '--config', type=str)
		group.add_argument('-d', '--dump-config', type=str)

		args = parser.parse_args()

		# init kiwi
		KIWI = Kiwi(args.config, args.server or args.start_server)

		# start kiwi server
		if args.start_server:
			return KIWI.runtime.run(KIWI.runtime.Modules.Server, KIWI)

		# pass arguments to kiwi client
		else:
			return KIWI.runtime.run(KIWI.runtime.Modules.Client, KIWI, args)

if __name__ == "__main__":
        main()
